<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://gliptak.github.io/</link>
    <description>Recent content on </description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2019 Gábor Lipták</copyright>
    <lastBuildDate>Sat, 07 Sep 2019 21:17:30 -0400</lastBuildDate>
    
	    <atom:link href="https://gliptak.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Organizations CLI</title>
      <link>https://gliptak.github.io/post/aws_organization_cli/</link>
      <pubDate>Sat, 07 Sep 2019 21:17:30 -0400</pubDate>
      
      <guid>https://gliptak.github.io/post/aws_organization_cli/</guid>
      <description>&lt;p&gt;Many AWS customers take advantage of AWS Organizations to organize and secure their workloads. In many cases, users login into their &lt;code&gt;master&lt;/code&gt; account and configure permissions allowing to switch to &lt;code&gt;member&lt;/code&gt; accounts in the Console. The same permissions can be used for &lt;code&gt;AWS CLI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this example below, a single &lt;code&gt;AWS Access Key&lt;/code&gt; has to be generated (and rotated) in the &lt;code&gt;master&lt;/code&gt; account and it can be used to switch to &lt;code&gt;test/2222222&lt;/code&gt; and &lt;code&gt;production/3333333&lt;/code&gt; accounts using the &lt;code&gt;CrossAccountAccessRole&lt;/code&gt; already configured for switching in the Console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[master]
aws_access_key_id     = AKIZZZZZZZZZZZZ
aws_secret_access_key = a78594065069565

[test]
role_arn = arn:aws:iam::2222222:role/CrossAccountAccessRole
source_profile = master

[production]
role_arn = arn:aws:iam::3333333:role/CrossAccountAccessRole
source_profile = master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Login into a CA SSO/Siteminder protected site with Python Requests</title>
      <link>https://gliptak.github.io/post/python-requests-siteminder/</link>
      <pubDate>Fri, 02 Jun 2017 19:07:05 -0400</pubDate>
      
      <guid>https://gliptak.github.io/post/python-requests-siteminder/</guid>
      <description>&lt;p&gt;While this below code is simple, it uses two important approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;utilizes a Requests Session to keep Siteminder login cookies/headers&lt;/li&gt;
&lt;li&gt;it has a two step load, allowing to fill out the Siteminder form&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests

if __name__ == &amp;quot;__main__&amp;quot;:
    mysite = &#39;http://mysite/&#39;
    credentials = {&#39;USER&#39;: &#39;myuser&#39;, &#39;PASSWORD&#39;: &#39;mypassword&#39;}
    s = requests.session() # use Session to keep cookies around
    page = s.get(mysite)
    s.post(page.url, data=credentials) # page.url is the Siteminder login screen
    page = s.get(mysite)
    print(page.content)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>AWS SimpleDB Boto3 Example</title>
      <link>https://gliptak.github.io/post/simpledb-example/</link>
      <pubDate>Wed, 15 Feb 2017 17:51:55 -0500</pubDate>
      
      <guid>https://gliptak.github.io/post/simpledb-example/</guid>
      <description>&lt;p&gt;When looking into AWS SimpleDB, a quick search didn&amp;rsquo;t return any short Python Boto3 examples. So I decided to post one.
(As with any services you to subscribe to, running this code below might cost you money &amp;hellip;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __future__ import print_function
import boto3


def quote(string):
    return string.replace(&amp;quot;&#39;&amp;quot;, &amp;quot;&#39;&#39;&amp;quot;).replace(&#39;&amp;quot;&#39;, &#39;&amp;quot;&amp;quot;&#39;).replace(&#39;`&#39;, &#39;``&#39;)


def put_attributes(sdb, domain, id, color):
    response = sdb.put_attributes(
        DomainName=domain,
        ItemName=id,
        Attributes=[
            {
                &#39;Name&#39;: &#39;color&#39;,
                &#39;Value&#39;: color,
                &#39;Replace&#39;: True
            },
        ],
    )
    print(response)


if __name__ == &amp;quot;__main__&amp;quot;:
    domain = &amp;quot;TEST_DOMAIN&amp;quot;
    sdb = boto3.client(&#39;sdb&#39;)
    response = sdb.create_domain(
        DomainName=domain
    )
    print(response)
    response = sdb.list_domains(
    )
    print(&amp;quot;Current domains: %s&amp;quot; % response[&#39;DomainNames&#39;])
    put_attributes(sdb, domain, &amp;quot;id1&amp;quot;, &amp;quot;red&amp;quot;)
    put_attributes(sdb, domain, &amp;quot;id2&amp;quot;, &amp;quot;redblue&amp;quot;)
    put_attributes(sdb, domain, &amp;quot;id3&amp;quot;, &amp;quot;blue&amp;quot;)
    response = sdb.select(
        SelectExpression=&#39;select * from %s where color like &amp;quot;%%%s%%&amp;quot;&#39; % (domain, quote(&#39;blue&#39;)),
    )
    print(response)
    response = sdb.delete_domain(
        DomainName=domain
    )
    print(response)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JAllele</title>
      <link>https://gliptak.github.io/project/jallele/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gliptak.github.io/project/jallele/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go - A Perspective</title>
      <link>https://gliptak.github.io/project/go-a-perspective/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gliptak.github.io/project/go-a-perspective/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
