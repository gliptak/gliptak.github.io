<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on </title>
    <link>https://gliptak.github.io/tags/python/</link>
    <description>Recent content in Python on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2021 Gábor Lipták</copyright>
    <lastBuildDate>Sat, 19 Dec 2020 17:07:05 -0400</lastBuildDate><atom:link href="https://gliptak.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running Jupyterhub Docker</title>
      <link>https://gliptak.github.io/post/jupyterhub_docker/</link>
      <pubDate>Sat, 19 Dec 2020 17:07:05 -0400</pubDate>
      
      <guid>https://gliptak.github.io/post/jupyterhub_docker/</guid>
      <description>Jupyterhub doesn&amp;rsquo;t seem to have complete instructions available on simply running an instance under Docker with a number of issues, Stackoverflow questions asking for clarifications. These are my quick notes:
As the Docker image name indicates, this is singleuser instance preconfigured for user jovyan. Run below command in directory with your notebooks
docker run --rm -p 8000:8000 -d -v `pwd`:/home/jovyan/work --name jupyterhub jupyterhub/singleuser jupyterhub There doesn&amp;rsquo;t seem to be (default) password set for jovyan user, so at this point you cannot login into the GUI.</description>
    </item>
    
    <item>
      <title>Splunk custom input with session</title>
      <link>https://gliptak.github.io/post/splunk_custom_input_session/</link>
      <pubDate>Sat, 31 Oct 2020 11:17:30 -0400</pubDate>
      
      <guid>https://gliptak.github.io/post/splunk_custom_input_session/</guid>
      <description>Splunk can be extended with custom inputs written in Python. In order to connect to Splunk services, code has to be configured and use a session token. Here is a basic setup emitting records with kvstore names
#!/usr/bin/env python import splunklib.client as client import sys import datetime as dt def generate(session_key): service = client.connect(token = session_key) for collection in service.kvstore: ts = dt.datetime.now(tz=dt.timezone.utc).isoformat() print(f&#39;{ts}, collection=&amp;quot;{collection.name}&amp;quot;&#39;) if __name__ == &amp;quot;__main__&amp;quot;: session_key = sys.</description>
    </item>
    
    <item>
      <title>Login into a CA SSO/Siteminder protected site with Python Requests</title>
      <link>https://gliptak.github.io/post/python-requests-siteminder/</link>
      <pubDate>Fri, 02 Jun 2017 19:07:05 -0400</pubDate>
      
      <guid>https://gliptak.github.io/post/python-requests-siteminder/</guid>
      <description>While this below code is simple, it uses two important approaches:
 utilizes a Requests Session to keep Siteminder login cookies/headers it has a two step load, allowing to fill out the Siteminder form  import requests if __name__ == &amp;#34;__main__&amp;#34;: mysite = &amp;#39;http://mysite/&amp;#39; credentials = {&amp;#39;USER&amp;#39;: &amp;#39;myuser&amp;#39;, &amp;#39;PASSWORD&amp;#39;: &amp;#39;mypassword&amp;#39;} s = requests.session() # use Session to keep cookies around page = s.get(mysite) s.post(page.url, data=credentials) # page.url is the Siteminder login screen page = s.</description>
    </item>
    
  </channel>
</rss>
