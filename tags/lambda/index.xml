<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda on </title>
    <link>https://gliptak.github.io/tags/lambda/</link>
    <description>Recent content in Lambda on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2021 Gábor Lipták</copyright>
    <lastBuildDate>Sun, 27 Jun 2021 01:47:41 -0400</lastBuildDate><atom:link href="https://gliptak.github.io/tags/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Packaging AWS Lambda functions with large dependencies as containers</title>
      <link>https://gliptak.github.io/post/aws_lambda_container/</link>
      <pubDate>Sun, 27 Jun 2021 01:47:41 -0400</pubDate>
      
      <guid>https://gliptak.github.io/post/aws_lambda_container/</guid>
      <description>While the actual application code for many lambda functions might be small, in many (data science) usecases libraries used and to be packaged together push over the deployment package limit of 50 MB compressed. Container packaging to the rescue.
A sample Dockerfile installing SageMaker Python SDK
ARG WORK_DIR=&amp;quot;/home/app/&amp;quot; FROM public.ecr.aws/lambda/python:3.8 ARG WORK_DIR RUN pip install wheel sagemaker COPY main.py . WORKDIR ${WORK_DIR} CMD [&amp;quot;main.handler&amp;quot;] and corresponding main.py
import sagemaker import sys def handler(event, context): print(sys.</description>
    </item>
    
    <item>
      <title>AWS Lambda Lookup AccountId and Region</title>
      <link>https://gliptak.github.io/post/aws_lambda_accountregion/</link>
      <pubDate>Fri, 02 Oct 2020 18:32:25 -0400</pubDate>
      
      <guid>https://gliptak.github.io/post/aws_lambda_accountregion/</guid>
      <description>For a number of uses including generating IAM roles and various policies, lambda code might require access to current account id and region. Here is a code snippet on how to acquire those values:
import json import logging import boto3 logger = logging.getLogger() logger.setLevel(logging.INFO) def lambda_handler(event, context): logger.info(json.dumps(event)) account_id = boto3.client(&#39;sts&#39;).get_caller_identity().get(&#39;Account&#39;) # use a client which is region based logs_client = boto3.client(&#39;logs&#39;) region_name = logs_client.meta.region_name logger.info(f&amp;quot;{account_id}:{region_name}&amp;quot;) </description>
    </item>
    
  </channel>
</rss>
