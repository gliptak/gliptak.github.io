<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | </title>
    <link>https://gliptak.github.io/post/</link>
      <atom:link href="https://gliptak.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2016-2021 Gábor Lipták</copyright><lastBuildDate>Sun, 27 Jun 2021 01:47:41 -0400</lastBuildDate>
    <image>
      <url>https://gliptak.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://gliptak.github.io/post/</link>
    </image>
    
    <item>
      <title>Packaging AWS Lambda functions with large dependencies as containers</title>
      <link>https://gliptak.github.io/post/aws_lambda_container/</link>
      <pubDate>Sun, 27 Jun 2021 01:47:41 -0400</pubDate>
      <guid>https://gliptak.github.io/post/aws_lambda_container/</guid>
      <description>&lt;p&gt;While the actual application code for many lambda functions might be small, in many (data science) usecases libraries used and to be packaged together push over the deployment package limit of 50 MB compressed. Container packaging to the rescue.&lt;/p&gt;
&lt;p&gt;A sample &lt;code&gt;Dockerfile&lt;/code&gt; installing 
&lt;a href=&#34;https://github.com/aws/sagemaker-python-sdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SageMaker Python SDK&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ARG WORK_DIR=&amp;quot;/home/app/&amp;quot;

FROM public.ecr.aws/lambda/python:3.8
ARG WORK_DIR

RUN pip install wheel sagemaker

COPY main.py .

WORKDIR ${WORK_DIR}
CMD [&amp;quot;main.handler&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and corresponding &lt;code&gt;main.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sagemaker
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;(event, context):
    print(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;version)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sagemaker &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sagemaker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__version__&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As an added bonus, above image can be built and tested locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker build -t sagemaker-python-sdk-demo:latest .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -XPOST &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9002/2015-03-31/functions/function/invocations&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;: true&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --rm -p 9002:8080 sagemaker-python-sdk-demo:latest

time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021-06-28T02:12:34.914&amp;#34;&lt;/span&gt; level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;info msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exec &amp;#39;/var/runtime/bootstrap&amp;#39; (cwd=/home/app, handler=)&amp;#34;&lt;/span&gt;
time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021-06-28T02:13:21.485&amp;#34;&lt;/span&gt; level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;info msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;extensionsDisabledByLayer(/opt/disable-extensions-jwigqn8j) -&amp;gt; stat /opt/disable-extensions-jwigqn8j: no such file or directory&amp;#34;&lt;/span&gt;
time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021-06-28T02:13:21.485&amp;#34;&lt;/span&gt; level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;warning msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot list external agents&amp;#34;&lt;/span&gt; error&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open /opt/extensions: no such file or directory&amp;#34;&lt;/span&gt;
START RequestId: 0265665a-d04e-4f29-b87d-472f3e7001ae Version: $LATEST
3.8.10 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default, Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; 2021, 07:32:26&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;GCC 7.3.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;20180712&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Red Hat 7.3.1-12&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;
sagemaker 2.47.0
END RequestId: 0265665a-d04e-4f29-b87d-472f3e7001ae
REPORT RequestId: 0265665a-d04e-4f29-b87d-472f3e7001ae	Init Duration: 0.45 ms	Duration: 1025.09 ms	Billed Duration: &lt;span style=&#34;color:#ae81ff&#34;&gt;1100&lt;/span&gt; ms	Memory Size: &lt;span style=&#34;color:#ae81ff&#34;&gt;3008&lt;/span&gt; MB	Max Memory Used: &lt;span style=&#34;color:#ae81ff&#34;&gt;3008&lt;/span&gt; MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the memory consumed above&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Review 
&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/images-create.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon ECR Registry upload&lt;/a&gt; and 
&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/configuration-images.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deployment&lt;/a&gt; documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Jupyterhub Docker</title>
      <link>https://gliptak.github.io/post/jupyterhub_docker/</link>
      <pubDate>Sat, 19 Dec 2020 17:07:05 -0400</pubDate>
      <guid>https://gliptak.github.io/post/jupyterhub_docker/</guid>
      <description>&lt;p&gt;&lt;code&gt;Jupyterhub&lt;/code&gt; doesn&amp;rsquo;t seem to have complete instructions available on simply running an instance under Docker with a number of issues, Stackoverflow questions asking for clarifications. These are my quick notes:&lt;/p&gt;
&lt;p&gt;As the Docker image name indicates, this is 
&lt;a href=&#34;https://hub.docker.com/r/jupyterhub/singleuser&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;singleuser&lt;/a&gt; instance preconfigured for user &lt;code&gt;jovyan&lt;/code&gt;. Run below command in directory with your notebooks&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --rm -p 8000:8000 -d -v `pwd`:/home/jovyan/work --name jupyterhub jupyterhub/singleuser jupyterhub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There doesn&amp;rsquo;t seem to be (default) password set for &lt;code&gt;jovyan&lt;/code&gt; user, so at this point you cannot login into the GUI. Set password for &lt;code&gt;jovyan&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec --user root -it jupyterhub bash
# passwd jovyan
New password: 
Retype new password: 
passwd: password updated successfully
# exit
exit
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;ℹ️ Above shell command can also be used to install system packages and pip install Python libraries. Please note that additional installs will not persist beyond stopping this current instance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After completing above steps, login to &lt;code&gt;Jupyterhub&lt;/code&gt; at 
&lt;a href=&#34;http://localhost:8000/user/jovyan/tree/work&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:8000/user/jovyan/tree/work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To cleanup running instance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker stop jupyterhub
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Splunk custom input with session</title>
      <link>https://gliptak.github.io/post/splunk_custom_input_session/</link>
      <pubDate>Sat, 31 Oct 2020 11:17:30 -0400</pubDate>
      <guid>https://gliptak.github.io/post/splunk_custom_input_session/</guid>
      <description>&lt;p&gt;&lt;code&gt;Splunk&lt;/code&gt; can be extended with custom inputs written in &lt;code&gt;Python&lt;/code&gt;. In order to connect to &lt;code&gt;Splunk&lt;/code&gt; services, code has to be configured and use a session token. Here is a basic setup emitting records with &lt;code&gt;kvstore&lt;/code&gt; names&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python

import splunklib.client as client
import sys
import datetime as dt

def generate(session_key):
    service = client.connect(token = session_key)
    for collection in service.kvstore:
        ts = dt.datetime.now(tz=dt.timezone.utc).isoformat()
        print(f&#39;{ts}, collection=&amp;quot;{collection.name}&amp;quot;&#39;)

if __name__ == &amp;quot;__main__&amp;quot;:
    session_key = sys.stdin.read()
    generate(session_key)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and the corresponding &lt;code&gt;default/inputs.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[script://./bin/listkvstores.py]
interval = 300
disabled = False
passAuth = nobody
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;kvstore&lt;/code&gt; access uses user &lt;code&gt;nobody&lt;/code&gt;, other &lt;code&gt;Splunk&lt;/code&gt; services might need a different user configured.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS Account Cleanup</title>
      <link>https://gliptak.github.io/post/aws_account_cleanup/</link>
      <pubDate>Sat, 31 Oct 2020 10:17:30 -0400</pubDate>
      <guid>https://gliptak.github.io/post/aws_account_cleanup/</guid>
      <description>&lt;p&gt;Many AWS customers skip initial planning steps and don&amp;rsquo;t establish infrastructure-as-code scripting practices initially necessitating querying and cleaning up resources to avoid billing charges.&lt;/p&gt;
&lt;h2 id=&#34;aws-tooling&#34;&gt;AWS tooling&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://aws.amazon.com/aws-cost-management/aws-cost-explorer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Cost Explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://console.aws.amazon.com/billing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Billing Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.aws.amazon.com/ARG/latest/userguide/tag-editor.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Tag Editor&lt;/a&gt; select all regions, all resource types and uncheck tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The open source community developed a number of tools&lt;/p&gt;
&lt;h2 id=&#34;list-all-aws-resources&#34;&gt;List all AWS resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/JohannesEbke/aws_list_all&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aws_list_all&lt;/a&gt; command line&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/jckuester/awsls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;awsls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/dtylman/AWSRetriever&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWSRetriever&lt;/a&gt; desktop&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/nccgroup/aws-inventory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aws-inventory&lt;/a&gt; command line and GUI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;filtered-delete&#34;&gt;Filtered delete&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/rebuy-de/aws-nuke&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aws-nuke&lt;/a&gt; extensive filtering&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/gruntwork-io/cloud-nuke&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cloud-nuke&lt;/a&gt; filtering by region, age, resourcetype is available&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AWS Lambda Lookup AccountId and Region</title>
      <link>https://gliptak.github.io/post/aws_lambda_accountregion/</link>
      <pubDate>Fri, 02 Oct 2020 18:32:25 -0400</pubDate>
      <guid>https://gliptak.github.io/post/aws_lambda_accountregion/</guid>
      <description>&lt;p&gt;For a number of uses including generating IAM roles and various policies, lambda code might require access to current account id and region. Here is a code snippet on how to acquire those values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import json
import logging
import boto3

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    logger.info(json.dumps(event))
    account_id = boto3.client(&#39;sts&#39;).get_caller_identity().get(&#39;Account&#39;)
    # use a client which is region based
    logs_client = boto3.client(&#39;logs&#39;)
    region_name = logs_client.meta.region_name
    logger.info(f&amp;quot;{account_id}:{region_name}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>AWS EC2 Instance Connect</title>
      <link>https://gliptak.github.io/post/aws_ec2instanceconnect/</link>
      <pubDate>Fri, 29 May 2020 11:17:30 -0400</pubDate>
      <guid>https://gliptak.github.io/post/aws_ec2instanceconnect/</guid>
      <description>&lt;p&gt;EC2 Instance Connect is somewhat overlooked functionality improving security of EC2 logins. During configuration, the &lt;strong&gt;default&lt;/strong&gt; instance user is assigned a public key so it&amp;rsquo;s private pair can be used to connect to the instance. The private key tends to be shared within support teams and logins can no longer be attributed to an individual. EC2 instance Connect runs and logs connect commands as the individual user and obeys user&amp;rsquo;s permission.&lt;/p&gt;
&lt;p&gt;Onto the steps. Run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; aws ec2-instance-connect send-ssh-public-key --instance-id i-0123abc --instance-os-user ec2-user --availability-zone us-east-1b --ssh-public-key file://id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Substitute the right values for your instance, they can be found on the &lt;strong&gt;AWS Console&lt;/strong&gt; or queried running &lt;code&gt;aws ec2 describe-instances&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After above command successful, use (routable) FQDN/IP to connect to your instance (some operating systems use a different &lt;strong&gt;default&lt;/strong&gt; user):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh ec2-user@1.2.3.4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The functionality also available from the &lt;strong&gt;AWS Console&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ec2instanceconnect.png&#34; alt=&#34;AWS Console Instance Connect&#34; title=&#34;AWS Console Instance Connect&#34;&gt;&lt;/p&gt;
&lt;p&gt;This activity is logged by 
&lt;a href=&#34;https://aws.amazon.com/cloudtrail/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CloudTrail&lt;/a&gt; although the shell commands still being run as the &lt;strong&gt;default&lt;/strong&gt; instance user.&lt;/p&gt;
&lt;p&gt;While EC2 Instance Connect offers less functionality as compared to other tooling like 
&lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Systems Manager SSM&lt;/a&gt; or a &lt;strong&gt;proper&lt;/strong&gt; Privileged Access Management (PAM) tool, it requires no additional configuration on the instance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS S3 Signed Upload URL Basics</title>
      <link>https://gliptak.github.io/post/aws_s3_signed_url/</link>
      <pubDate>Thu, 19 Mar 2020 17:32:25 -0400</pubDate>
      <guid>https://gliptak.github.io/post/aws_s3_signed_url/</guid>
      <description>&lt;p&gt;While I found a number of examples for generating signed upload S3 URLs, there didn&amp;rsquo;t seem to be examples with the basics.&lt;/p&gt;
&lt;p&gt;After substituting the name for your bucket, file name and expiry desired, run below code to generate the URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import boto3

if __name__ == &amp;quot;__main__&amp;quot;:
    s3_client = boto3.client(&#39;s3&#39;)
    response = s3_client.generate_presigned_url(
        ClientMethod=&#39;put_object&#39;,
        Params={&amp;quot;Bucket&amp;quot;: &amp;quot;mybucket&amp;quot;, &amp;quot;Key&amp;quot;: &amp;quot;file.pdf&amp;quot;},
        ExpiresIn=48*60*60,
        HttpMethod=&amp;quot;PUT&amp;quot;)
    print(response)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To upload from command line run below (substituting URL from previous section):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl &amp;quot;https://mybucket.s3.amazonaws.com/file.pdf?AWSAccessKeyId=AKIAWR6H3WAK6NZTVBJP&amp;amp;Signature=CkFT8z3KK8zznNSZ6sOZryFHQTM%3D&amp;amp;Expires=1584826340&amp;quot; --upload-file file.pdf
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>AWS Cloudformation Referencing AMIs Using SSM Parameter Store</title>
      <link>https://gliptak.github.io/post/aws_ssm_ami/</link>
      <pubDate>Wed, 11 Sep 2019 21:32:25 -0400</pubDate>
      <guid>https://gliptak.github.io/post/aws_ssm_ami/</guid>
      <description>&lt;p&gt;When AWS infrastructure configured in &amp;ldquo;traditional&amp;rdquo; compute/storage/network style, identifying, referencing and patching AMIs in all regions in use is crucial. Cloudformation has a way to redirect AMI references through SSM Parameter Store.&lt;/p&gt;
&lt;p&gt;This represents a tradeoff, as recreating the Cloudformation stack might pickup the next (patched) AMI hence it is no longer immutable. But resulting state is similar to externally patched Linux/Windows images which also cannot be recreated by simply redeploying Cloudformation.&lt;/p&gt;
&lt;p&gt;Th Cloudformation syntax as follows. &lt;code&gt;AmiId&lt;/code&gt; can point to both AWS and customer published values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: &#39;2010-09-09&#39;

Parameters:
  AmiId:
    Type: AWS::SSM::Parameter::Value&amp;lt;AWS::EC2::Image::Id&amp;gt;
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs

Resources:
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At the time of this posting, here are some AWS maintained AMIs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws ssm get-parameters-by-path --path /aws/service/ami-amazon-linux-latest | jq &amp;quot;.Parameters[].Name&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-ebs&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-s3&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-minimal-hvm-x86_64-s3&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-minimal-pv-x86_64-s3&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-pv-x86_64-s3&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-minimal-hvm-arm64-ebs&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-minimal-hvm-x86_64-ebs&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-minimal-pv-x86_64-ebs&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn-ami-pv-x86_64-ebs&amp;quot;
&amp;quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-minimal-hvm-x86_64-ebs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;aws ssm get-parameters-by-path --path /aws/service/ami-windows-latest | jq &amp;quot;.Parameters[].Name&amp;quot; | grep &amp;quot;English&amp;quot; | grep &amp;quot;\-2019&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Web&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Standard&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Web&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-HyperV&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-Base&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-ContainersLatest&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Express&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Express&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Standard&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-ContainersLatest&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Enterprise&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Enterprise&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Tesla&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-ECS_Optimized&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And some &amp;ldquo;oddballs&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws ssm get-parameters-by-path --path /aws/service/ami-windows-latest | jq &amp;quot;.Parameters[].Name&amp;quot; | grep -v Windows
&amp;quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20190313-x86_64-gp2-SQL_2017_Express&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/RHEL-7.6_HVM_GA-20181017-x86_64-0-Hourly2-GP2-SQL_2017_Enterprise&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-bionic-18.04-amd64-server-20180522-dotnetcore&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20180622.1-x86_64-gp2-dotnetcore&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20190212-SQL_2017_Web&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_Express&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_Standard&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_Enterprise&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_Web&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20190313-x86_64-gp2-SQL_2017_Enterprise&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20190212-SQL_2017_Enterprise&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20190313-x86_64-gp2-SQL_2017_Web&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20190212-SQL_2017_Express&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20190313-x86_64-gp2-SQL_2017_Standard&amp;quot;
&amp;quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20190212-SQL_2017_Standard&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>AWS Organizations CLI</title>
      <link>https://gliptak.github.io/post/aws_organization_cli/</link>
      <pubDate>Sat, 07 Sep 2019 21:17:30 -0400</pubDate>
      <guid>https://gliptak.github.io/post/aws_organization_cli/</guid>
      <description>&lt;p&gt;Many AWS customers take advantage of AWS Organizations to organize and secure their workloads. In many cases, users login into their &lt;code&gt;master&lt;/code&gt; account and configure permissions allowing to switch to &lt;code&gt;member&lt;/code&gt; accounts in the Console. The same permissions can be used for &lt;code&gt;AWS CLI&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this example below, a single &lt;code&gt;AWS Access Key&lt;/code&gt; has to be generated (and rotated) in the &lt;code&gt;master&lt;/code&gt; account and it can be used to switch to &lt;code&gt;test/2222222&lt;/code&gt; and &lt;code&gt;production/3333333&lt;/code&gt; accounts using the &lt;code&gt;CrossAccountAccessRole&lt;/code&gt; already configured for switching in the Console.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[master]
aws_access_key_id     = AKIZZZZZZZZZZZZ
aws_secret_access_key = a78594065069565

[test]
role_arn = arn:aws:iam::2222222:role/CrossAccountAccessRole
source_profile = master

[production]
role_arn = arn:aws:iam::3333333:role/CrossAccountAccessRole
source_profile = master
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Login into a CA SSO/Siteminder protected site with Python Requests</title>
      <link>https://gliptak.github.io/post/python-requests-siteminder/</link>
      <pubDate>Fri, 02 Jun 2017 19:07:05 -0400</pubDate>
      <guid>https://gliptak.github.io/post/python-requests-siteminder/</guid>
      <description>&lt;p&gt;While this below code is simple, it uses two important approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;utilizes a Requests Session to keep Siteminder login cookies/headers&lt;/li&gt;
&lt;li&gt;it has a two step load, allowing to fill out the Siteminder form&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    mysite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://mysite/&amp;#39;&lt;/span&gt;
    credentials &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myuser&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mypassword&amp;#39;&lt;/span&gt;}
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;session() &lt;span style=&#34;color:#75715e&#34;&gt;# use Session to keep cookies around&lt;/span&gt;
    page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(mysite)
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;credentials) &lt;span style=&#34;color:#75715e&#34;&gt;# page.url is the Siteminder login screen&lt;/span&gt;
    page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(mysite)
    print(page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AWS SimpleDB Boto3 Example</title>
      <link>https://gliptak.github.io/post/simpledb-example/</link>
      <pubDate>Wed, 15 Feb 2017 17:51:55 -0500</pubDate>
      <guid>https://gliptak.github.io/post/simpledb-example/</guid>
      <description>&lt;p&gt;When looking into AWS SimpleDB, a quick search didn&amp;rsquo;t return any short Python Boto3 examples. So I decided to post one.
(As with any services you to subscribe to, running this code below might cost you money &amp;hellip;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; __future__ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; print_function
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; boto3


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quote&lt;/span&gt;(string):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#34;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;`&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;``&amp;#39;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;put_attributes&lt;/span&gt;(sdb, domain, id, color):
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put_attributes(
        DomainName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;domain,
        ItemName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;id,
        Attributes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
            {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Value&amp;#39;&lt;/span&gt;: color,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Replace&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
            },
        ],
    )
    print(response)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    domain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TEST_DOMAIN&amp;#34;&lt;/span&gt;
    sdb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sdb&amp;#39;&lt;/span&gt;)
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_domain(
        DomainName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;domain
    )
    print(response)
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_domains(
    )
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current domains: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; response[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DomainNames&amp;#39;&lt;/span&gt;])
    put_attributes(sdb, domain, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;)
    put_attributes(sdb, domain, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redblue&amp;#34;&lt;/span&gt;)
    put_attributes(sdb, domain, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;)
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select(
        SelectExpression&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;select * from &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; where color like &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%%%s%%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (domain, quote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;)),
    )
    print(response)
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delete_domain(
        DomainName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;domain
    )
    print(response)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
