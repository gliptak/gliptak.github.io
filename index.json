[{"authors":["gliptak"],"categories":null,"content":"Hands-on software architect working as an application architect, integration architect, and enterprise architect in various industries. Experienced in Microservices Architectures, Service-Based Architectures, and Service-Oriented Architectures. Conference speaker and trainer. Keeping coding skills sharp as an open source enthusiast.\n","date":1590765450,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1590765450,"objectID":"6a5735510cbd32c2a406ca9838ee6e34","permalink":"https://gliptak.github.io/authors/gliptak/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/gliptak/","section":"authors","summary":"Hands-on software architect working as an application architect, integration architect, and enterprise architect in various industries. Experienced in Microservices Architectures, Service-Based Architectures, and Service-Oriented Architectures. Conference speaker and trainer. Keeping coding skills sharp as an open source enthusiast.","tags":null,"title":"Gábor Lipták","type":"authors"},{"authors":["Gábor Lipták"],"categories":[],"content":"EC2 Instance Connect is somewhat overlooked functionality improving security of EC2 logins. During configuration, the default instance user is assigned a public key so it\u0026rsquo;s private pair can be used to connect to the instance. The private key tends to be shared within support teams and logins can no longer be attributed to an individual. EC2 instance Connect runs and logs connect commands as the individual user and obeys user\u0026rsquo;s permission.\nOnto the steps. Run:\n aws ec2-instance-connect send-ssh-public-key --instance-id i-0123abc --instance-os-user ec2-user --availability-zone us-east-1b --ssh-public-key file://id_rsa.pub Substitute the right values for your instance, they can be found on the AWS Console or queried running aws ec2 describe-instances.\nAfter above command successful, use (routable) FQDN/IP to connect to your instance:\nssh ec2-user@1.2.3.4 The functionality also available from the AWS Console:\nThis activity is logged by CloudTrail although the shell commands still being run as the default instance user.\nWhile EC2 Instance Connect offers less functionality as compared to other tooling like AWS Systems Manager SSM or a proper Privileged Access Management (PAM) tool, it requires no additional configuration on the instance.\n","date":1590765450,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590765450,"objectID":"b1079a1a74e0bc4679793d50b8fdac44","permalink":"https://gliptak.github.io/post/aws_ec2instanceconnect/","publishdate":"2020-05-29T11:17:30-04:00","relpermalink":"/post/aws_ec2instanceconnect/","section":"post","summary":"EC2 Instance Connect is somewhat overlooked functionality improving security of EC2 logins. During configuration, the default instance user is assigned a public key so it\u0026rsquo;s private pair can be used to connect to the instance. The private key tends to be shared within support teams and logins can no longer be attributed to an individual. EC2 instance Connect runs and logs connect commands as the individual user and obeys user\u0026rsquo;s permission.","tags":["AWS"],"title":"AWS EC2 Instance Connect","type":"post"},{"authors":["Gábor Lipták"],"categories":[],"content":"While I found a number of examples for generating signed upload S3 URLs, there didn\u0026rsquo;t seem to be examples with the basics.\nAfter substituting the name for your bucket, file name and expiry desired, run below code to generate the URL:\nimport boto3 if __name__ == \u0026quot;__main__\u0026quot;: s3_client = boto3.client('s3') response = s3_client.generate_presigned_url( ClientMethod='put_object', Params={\u0026quot;Bucket\u0026quot;: \u0026quot;mybucket\u0026quot;, \u0026quot;Key\u0026quot;: \u0026quot;file.pdf\u0026quot;}, ExpiresIn=48*60*60, HttpMethod=\u0026quot;PUT\u0026quot;) print(response) To upload from command line run below (substituting URL from previous section):\ncurl \u0026quot;https://mybucket.s3.amazonaws.com/file.pdf?AWSAccessKeyId=AKIAWR6H3WAK6NZTVBJP\u0026amp;Signature=CkFT8z3KK8zznNSZ6sOZryFHQTM%3D\u0026amp;Expires=1584826340\u0026quot; --upload-file file.pdf ","date":1584653545,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584653545,"objectID":"a34c5fdd19f61356bf2afe47d3b54fcf","permalink":"https://gliptak.github.io/post/aws_s3_signed_url/","publishdate":"2020-03-19T17:32:25-04:00","relpermalink":"/post/aws_s3_signed_url/","section":"post","summary":"While I found a number of examples for generating signed upload S3 URLs, there didn\u0026rsquo;t seem to be examples with the basics.\nAfter substituting the name for your bucket, file name and expiry desired, run below code to generate the URL:\nimport boto3 if __name__ == \u0026quot;__main__\u0026quot;: s3_client = boto3.client('s3') response = s3_client.generate_presigned_url( ClientMethod='put_object', Params={\u0026quot;Bucket\u0026quot;: \u0026quot;mybucket\u0026quot;, \u0026quot;Key\u0026quot;: \u0026quot;file.pdf\u0026quot;}, ExpiresIn=48*60*60, HttpMethod=\u0026quot;PUT\u0026quot;) print(response) To upload from command line run below (substituting URL from previous section):","tags":["AWS","S3"],"title":"AWS S3 Signed Upload URL Basics","type":"post"},{"authors":["Gábor Lipták"],"categories":[],"content":"When AWS infrastructure configured in \u0026ldquo;traditional\u0026rdquo; compute/storage/network style, identifying, referencing and patching AMIs in all regions in use is crucial. Cloudformation has a way to redirect AMI references through SSM Parameter Store.\nThis represents a tradeoff, as recreating the Cloudformation stack might pickup the next (patched) AMI hence it is no longer immutable. But resulting state is similar to externally patched Linux/Windows images which also cannot be recreated by simply redeploying Cloudformation.\nTh Cloudformation syntax as follows. AmiId can point to both AWS and customer published values:\nAWSTemplateFormatVersion: '2010-09-09' Parameters: AmiId: Type: AWS::SSM::Parameter::Value\u0026lt;AWS::EC2::Image::Id\u0026gt; Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs Resources: Instance: Type: AWS::EC2::Instance Properties: ImageId: !Ref AmiId At the time of this posting, here are some AWS maintained AMIs:\naws ssm get-parameters-by-path --path /aws/service/ami-amazon-linux-latest | jq \u0026quot;.Parameters[].Name\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-ebs\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-s3\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-minimal-hvm-x86_64-s3\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-minimal-pv-x86_64-s3\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-pv-x86_64-s3\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-minimal-hvm-arm64-ebs\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-minimal-hvm-x86_64-ebs\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-minimal-pv-x86_64-ebs\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn-ami-pv-x86_64-ebs\u0026quot; \u0026quot;/aws/service/ami-amazon-linux-latest/amzn2-ami-minimal-hvm-x86_64-ebs\u0026quot; aws ssm get-parameters-by-path --path /aws/service/ami-windows-latest | jq \u0026quot;.Parameters[].Name\u0026quot; | grep \u0026quot;English\u0026quot; | grep \u0026quot;\\-2019\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Web\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Standard\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Web\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-HyperV\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-Base\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-ContainersLatest\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Express\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Express\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Standard\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-ContainersLatest\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Enterprise\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Enterprise\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Tesla\u0026quot; \u0026quot;/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-ECS_Optimized\u0026quot; And some \u0026ldquo;oddballs\u0026rdquo;\naws ssm get-parameters-by-path --path /aws/service/ami-windows-latest | jq \u0026quot;.Parameters[].Name\u0026quot; | grep -v Windows \u0026quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20190313-x86_64-gp2-SQL_2017_Express\u0026quot; \u0026quot;/aws/service/ami-windows-latest/RHEL-7.6_HVM_GA-20181017-x86_64-0-Hourly2-GP2-SQL_2017_Enterprise\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-bionic-18.04-amd64-server-20180522-dotnetcore\u0026quot; \u0026quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20180622.1-x86_64-gp2-dotnetcore\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20190212-SQL_2017_Web\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_Express\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_Standard\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_Enterprise\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_Web\u0026quot; \u0026quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20190313-x86_64-gp2-SQL_2017_Enterprise\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20190212-SQL_2017_Enterprise\u0026quot; \u0026quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20190313-x86_64-gp2-SQL_2017_Web\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20190212-SQL_2017_Express\u0026quot; \u0026quot;/aws/service/ami-windows-latest/amzn2-ami-hvm-2.0.20190313-x86_64-gp2-SQL_2017_Standard\u0026quot; \u0026quot;/aws/service/ami-windows-latest/ubuntu-xenial-16.04-amd64-server-20190212-SQL_2017_Standard\u0026quot; ","date":1568251945,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568251945,"objectID":"fdb02ad00c12ea24c0416ee7a6afa29f","permalink":"https://gliptak.github.io/post/aws_ssm_ami/","publishdate":"2019-09-11T21:32:25-04:00","relpermalink":"/post/aws_ssm_ami/","section":"post","summary":"When AWS infrastructure configured in \u0026ldquo;traditional\u0026rdquo; compute/storage/network style, identifying, referencing and patching AMIs in all regions in use is crucial. Cloudformation has a way to redirect AMI references through SSM Parameter Store.\nThis represents a tradeoff, as recreating the Cloudformation stack might pickup the next (patched) AMI hence it is no longer immutable. But resulting state is similar to externally patched Linux/Windows images which also cannot be recreated by simply redeploying Cloudformation.","tags":["AWS","Cloudformation"],"title":"AWS Cloudformation Referencing AMIs Using SSM Parameter Store","type":"post"},{"authors":["Gábor Lipták"],"categories":[],"content":"Many AWS customers take advantage of AWS Organizations to organize and secure their workloads. In many cases, users login into their master account and configure permissions allowing to switch to member accounts in the Console. The same permissions can be used for AWS CLI.\nIn this example below, a single AWS Access Key has to be generated (and rotated) in the master account and it can be used to switch to test/2222222 and production/3333333 accounts using the CrossAccountAccessRole already configured for switching in the Console.\n[master] aws_access_key_id = AKIZZZZZZZZZZZZ aws_secret_access_key = a78594065069565 [test] role_arn = arn:aws:iam::2222222:role/CrossAccountAccessRole source_profile = master [production] role_arn = arn:aws:iam::3333333:role/CrossAccountAccessRole source_profile = master ","date":1567905450,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567905450,"objectID":"428eab21cae0e5a1776a0d06f2d93064","permalink":"https://gliptak.github.io/post/aws_organization_cli/","publishdate":"2019-09-07T21:17:30-04:00","relpermalink":"/post/aws_organization_cli/","section":"post","summary":"Many AWS customers take advantage of AWS Organizations to organize and secure their workloads. In many cases, users login into their master account and configure permissions allowing to switch to member accounts in the Console. The same permissions can be used for AWS CLI.\nIn this example below, a single AWS Access Key has to be generated (and rotated) in the master account and it can be used to switch to test/2222222 and production/3333333 accounts using the CrossAccountAccessRole already configured for switching in the Console.","tags":["AWS"],"title":"AWS Organizations CLI","type":"post"},{"authors":["Gábor Lipták"],"categories":[],"content":"While this below code is simple, it uses two important approaches:\n utilizes a Requests Session to keep Siteminder login cookies/headers it has a two step load, allowing to fill out the Siteminder form  import requests if __name__ == \u0026#34;__main__\u0026#34;: mysite = \u0026#39;http://mysite/\u0026#39; credentials = {\u0026#39;USER\u0026#39;: \u0026#39;myuser\u0026#39;, \u0026#39;PASSWORD\u0026#39;: \u0026#39;mypassword\u0026#39;} s = requests.session() # use Session to keep cookies around page = s.get(mysite) s.post(page.url, data=credentials) # page.url is the Siteminder login screen page = s.get(mysite) print(page.content) ","date":1496444825,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1496444825,"objectID":"651ed759d74822a81a6fa86a4a7907f3","permalink":"https://gliptak.github.io/post/python-requests-siteminder/","publishdate":"2017-06-02T19:07:05-04:00","relpermalink":"/post/python-requests-siteminder/","section":"post","summary":"While this below code is simple, it uses two important approaches:\n utilizes a Requests Session to keep Siteminder login cookies/headers it has a two step load, allowing to fill out the Siteminder form  import requests if __name__ == \u0026#34;__main__\u0026#34;: mysite = \u0026#39;http://mysite/\u0026#39; credentials = {\u0026#39;USER\u0026#39;: \u0026#39;myuser\u0026#39;, \u0026#39;PASSWORD\u0026#39;: \u0026#39;mypassword\u0026#39;} s = requests.session() # use Session to keep cookies around page = s.get(mysite) s.post(page.url, data=credentials) # page.url is the Siteminder login screen page = s.","tags":["Python","Requests","Siteminder","SSO"],"title":"Login into a CA SSO/Siteminder protected site with Python Requests","type":"post"},{"authors":["Gábor Lipták"],"categories":[],"content":"When looking into AWS SimpleDB, a quick search didn\u0026rsquo;t return any short Python Boto3 examples. So I decided to post one. (As with any services you to subscribe to, running this code below might cost you money \u0026hellip;)\nfrom __future__ import print_function import boto3 def quote(string): return string.replace(\u0026#34;\u0026#39;\u0026#34;, \u0026#34;\u0026#39;\u0026#39;\u0026#34;).replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#34;\u0026#34;\u0026#39;).replace(\u0026#39;`\u0026#39;, \u0026#39;``\u0026#39;) def put_attributes(sdb, domain, id, color): response = sdb.put_attributes( DomainName=domain, ItemName=id, Attributes=[ { \u0026#39;Name\u0026#39;: \u0026#39;color\u0026#39;, \u0026#39;Value\u0026#39;: color, \u0026#39;Replace\u0026#39;: True }, ], ) print(response) if __name__ == \u0026#34;__main__\u0026#34;: domain = \u0026#34;TEST_DOMAIN\u0026#34; sdb = boto3.client(\u0026#39;sdb\u0026#39;) response = sdb.create_domain( DomainName=domain ) print(response) response = sdb.list_domains( ) print(\u0026#34;Current domains: %s\u0026#34; % response[\u0026#39;DomainNames\u0026#39;]) put_attributes(sdb, domain, \u0026#34;id1\u0026#34;, \u0026#34;red\u0026#34;) put_attributes(sdb, domain, \u0026#34;id2\u0026#34;, \u0026#34;redblue\u0026#34;) put_attributes(sdb, domain, \u0026#34;id3\u0026#34;, \u0026#34;blue\u0026#34;) response = sdb.select( SelectExpression=\u0026#39;select * from %swhere color like \u0026#34;%%%s%%\u0026#34;\u0026#39; % (domain, quote(\u0026#39;blue\u0026#39;)), ) print(response) response = sdb.delete_domain( DomainName=domain ) print(response) ","date":1487199115,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487199115,"objectID":"0e6f5bff746cfae857f68c2429d7be2f","permalink":"https://gliptak.github.io/post/simpledb-example/","publishdate":"2017-02-15T17:51:55-05:00","relpermalink":"/post/simpledb-example/","section":"post","summary":"When looking into AWS SimpleDB, a quick search didn\u0026rsquo;t return any short Python Boto3 examples. So I decided to post one. (As with any services you to subscribe to, running this code below might cost you money \u0026hellip;)\nfrom __future__ import print_function import boto3 def quote(string): return string.replace(\u0026#34;\u0026#39;\u0026#34;, \u0026#34;\u0026#39;\u0026#39;\u0026#34;).replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#34;\u0026#34;\u0026#39;).replace(\u0026#39;`\u0026#39;, \u0026#39;``\u0026#39;) def put_attributes(sdb, domain, id, color): response = sdb.put_attributes( DomainName=domain, ItemName=id, Attributes=[ { \u0026#39;Name\u0026#39;: \u0026#39;color\u0026#39;, \u0026#39;Value\u0026#39;: color, \u0026#39;Replace\u0026#39;: True }, ], ) print(response) if __name__ == \u0026#34;__main__\u0026#34;: domain = \u0026#34;TEST_DOMAIN\u0026#34; sdb = boto3.","tags":["AWS","Boto3"],"title":"AWS SimpleDB Boto3 Example","type":"post"},{"authors":null,"categories":null,"content":"","date":1482451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1482451200,"objectID":"f260737f45d16625b8764cec25c908c0","permalink":"https://gliptak.github.io/project/jallele/","publishdate":"2016-12-23T00:00:00Z","relpermalink":"/project/jallele/","section":"project","summary":"JAllele is a Java mutation testing tool.","tags":null,"title":"JAllele","type":"project"},{"authors":null,"categories":null,"content":"","date":1477958400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1477958400,"objectID":"eec36d3e4e8d3fe47cb9eb4ff776eeda","permalink":"https://gliptak.github.io/project/go-a-perspective/","publishdate":"2016-11-01T00:00:00Z","relpermalink":"/project/go-a-perspective/","section":"project","summary":"Presentation on Go features anchoring them onto other languages like C, Java, Python, etc.","tags":null,"title":"Go - A Perspective","type":"project"}]