[{"authors":["gliptak"],"categories":null,"content":"Hands-on software architect working as an application architect, integration architect, and enterprise architect in various industries. Experienced in Microservices Architectures, Service-Based Architectures, and Service-Oriented Architectures. Conference speaker and trainer. Keeping coding skills sharp as an open source enthusiast.\n","date":1496444825,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1496444825,"objectID":"6a5735510cbd32c2a406ca9838ee6e34","permalink":"https://gliptak.github.io/authors/gliptak/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/gliptak/","section":"authors","summary":"Hands-on software architect working as an application architect, integration architect, and enterprise architect in various industries. Experienced in Microservices Architectures, Service-Based Architectures, and Service-Oriented Architectures. Conference speaker and trainer. Keeping coding skills sharp as an open source enthusiast.","tags":null,"title":"Gábor Lipták","type":"authors"},{"authors":[],"categories":[],"content":"Many AWS customers take advantage of AWS Organizations to organize and secure their workloads. In many cases, users login into their master account and configure permissions allowing to switch to member accounts in the Console. The same permissions can be used for AWS CLI.\nIn this example below, a single AWS Access Key has to be generated (and rotated) in the master account and it can be used to switch to test/2222222 and production/3333333 accounts using the CrossAccountAccessRole already configured for switching in the Console.\n[master] aws_access_key_id = AKIZZZZZZZZZZZZ aws_secret_access_key = a78594065069565 [test] role_arn = arn:aws:iam::2222222:role/CrossAccountAccessRole source_profile = master [production] role_arn = arn:aws:iam::3333333:role/CrossAccountAccessRole source_profile = master  ","date":1567905450,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567905450,"objectID":"428eab21cae0e5a1776a0d06f2d93064","permalink":"https://gliptak.github.io/post/aws_organization_cli/","publishdate":"2019-09-07T21:17:30-04:00","relpermalink":"/post/aws_organization_cli/","section":"post","summary":"Many AWS customers take advantage of AWS Organizations to organize and secure their workloads. In many cases, users login into their master account and configure permissions allowing to switch to member accounts in the Console. The same permissions can be used for AWS CLI.\nIn this example below, a single AWS Access Key has to be generated (and rotated) in the master account and it can be used to switch to test/2222222 and production/3333333 accounts using the CrossAccountAccessRole already configured for switching in the Console.","tags":["AWS"],"title":"AWS Organizations CLI","type":"post"},{"authors":["Gábor Lipták"],"categories":[],"content":"While this below code is simple, it uses two important approaches:\n utilizes a Requests Session to keep Siteminder login cookies/headers it has a two step load, allowing to fill out the Siteminder form  import requests if __name__ == \u0026quot;__main__\u0026quot;: mysite = 'http://mysite/' credentials = {'USER': 'myuser', 'PASSWORD': 'mypassword'} s = requests.session() # use Session to keep cookies around page = s.get(mysite) s.post(page.url, data=credentials) # page.url is the Siteminder login screen page = s.get(mysite) print(page.content)  ","date":1496444825,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1496444825,"objectID":"651ed759d74822a81a6fa86a4a7907f3","permalink":"https://gliptak.github.io/post/python-requests-siteminder/","publishdate":"2017-06-02T19:07:05-04:00","relpermalink":"/post/python-requests-siteminder/","section":"post","summary":"While this below code is simple, it uses two important approaches:\n utilizes a Requests Session to keep Siteminder login cookies/headers it has a two step load, allowing to fill out the Siteminder form  import requests if __name__ == \u0026quot;__main__\u0026quot;: mysite = 'http://mysite/' credentials = {'USER': 'myuser', 'PASSWORD': 'mypassword'} s = requests.session() # use Session to keep cookies around page = s.get(mysite) s.post(page.url, data=credentials) # page.url is the Siteminder login screen page = s.","tags":["Python","Requests","Siteminder","SSO"],"title":"Login into a CA SSO/Siteminder protected site with Python Requests","type":"post"},{"authors":["Gábor Lipták"],"categories":[],"content":"When looking into AWS SimpleDB, a quick search didn\u0026rsquo;t return any short Python Boto3 examples. So I decided to post one. (As with any services you to subscribe to, running this code below might cost you money \u0026hellip;)\nfrom __future__ import print_function import boto3 def quote(string): return string.replace(\u0026quot;'\u0026quot;, \u0026quot;''\u0026quot;).replace('\u0026quot;', '\u0026quot;\u0026quot;').replace('`', '``') def put_attributes(sdb, domain, id, color): response = sdb.put_attributes( DomainName=domain, ItemName=id, Attributes=[ { 'Name': 'color', 'Value': color, 'Replace': True }, ], ) print(response) if __name__ == \u0026quot;__main__\u0026quot;: domain = \u0026quot;TEST_DOMAIN\u0026quot; sdb = boto3.client('sdb') response = sdb.create_domain( DomainName=domain ) print(response) response = sdb.list_domains( ) print(\u0026quot;Current domains: %s\u0026quot; % response['DomainNames']) put_attributes(sdb, domain, \u0026quot;id1\u0026quot;, \u0026quot;red\u0026quot;) put_attributes(sdb, domain, \u0026quot;id2\u0026quot;, \u0026quot;redblue\u0026quot;) put_attributes(sdb, domain, \u0026quot;id3\u0026quot;, \u0026quot;blue\u0026quot;) response = sdb.select( SelectExpression='select * from %s where color like \u0026quot;%%%s%%\u0026quot;' % (domain, quote('blue')), ) print(response) response = sdb.delete_domain( DomainName=domain ) print(response)  ","date":1487199115,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487199115,"objectID":"0e6f5bff746cfae857f68c2429d7be2f","permalink":"https://gliptak.github.io/post/simpledb-example/","publishdate":"2017-02-15T17:51:55-05:00","relpermalink":"/post/simpledb-example/","section":"post","summary":"When looking into AWS SimpleDB, a quick search didn\u0026rsquo;t return any short Python Boto3 examples. So I decided to post one. (As with any services you to subscribe to, running this code below might cost you money \u0026hellip;)\nfrom __future__ import print_function import boto3 def quote(string): return string.replace(\u0026quot;'\u0026quot;, \u0026quot;''\u0026quot;).replace('\u0026quot;', '\u0026quot;\u0026quot;').replace('`', '``') def put_attributes(sdb, domain, id, color): response = sdb.put_attributes( DomainName=domain, ItemName=id, Attributes=[ { 'Name': 'color', 'Value': color, 'Replace': True }, ], ) print(response) if __name__ == \u0026quot;__main__\u0026quot;: domain = \u0026quot;TEST_DOMAIN\u0026quot; sdb = boto3.","tags":["aws","boto3"],"title":"AWS SimpleDB Boto3 Example","type":"post"},{"authors":null,"categories":null,"content":"","date":1482451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1482451200,"objectID":"f260737f45d16625b8764cec25c908c0","permalink":"https://gliptak.github.io/project/jallele/","publishdate":"2016-12-23T00:00:00Z","relpermalink":"/project/jallele/","section":"project","summary":"JAllele is a Java mutation testing tool.","tags":null,"title":"JAllele","type":"project"},{"authors":null,"categories":null,"content":"","date":1477958400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1477958400,"objectID":"eec36d3e4e8d3fe47cb9eb4ff776eeda","permalink":"https://gliptak.github.io/project/go-a-perspective/","publishdate":"2016-11-01T00:00:00Z","relpermalink":"/project/go-a-perspective/","section":"project","summary":"Presentation on Go features anchoring them onto other languages like C, Java, Python, etc.","tags":null,"title":"Go - A Perspective","type":"project"}]